// // LIST_ENTRY structure (Windows kernel)
// typedef struct {
//     struct _LIST_ENTRY *Flink;
//     struct _LIST_ENTRY *Blink;
// } LIST_ENTRY, *PLIST_ENTRY;

// // UNICODE_STRING structure (Windows kernel)
// typedef struct {
//     UINT16 Length;
//     UINT16 MaximumLength;
//     WCHAR *Buffer;
// } UNICODE_STRING, *PUNICODE_STRING;

// // LDR_DATA_TABLE_ENTRY structure
// typedef struct {
//     LIST_ENTRY InLoadOrderLinks;
//     LIST_ENTRY InMemoryOrderLinks;
//     LIST_ENTRY InInitializationOrderLinks;
//     VOID *DllBase;
//     VOID *EntryPoint;
//     UINT32 SizeOfImage;
//     UNICODE_STRING FullDllName;
//     UNICODE_STRING BaseDllName;
//     // ... rest of the structure
// } LDR_DATA_TABLE_ENTRY, *PLDR_DATA_TABLE_ENTRY;

// // Windows Loader Parameter Block
// // typedef struct {
//     UINT32 OsMajorVersion;
//     UINT32 OsMinorVersion;
//     UINT32 Length;
//     UINT32 Reserved;
//     LIST_ENTRY LoadOrderListHead;
//     LIST_ENTRY MemoryDescriptorListHead;
//     LIST_ENTRY BootDriverListHead;
// } PARAMETER_BLOCK, *PPARAMETER_BLOCK;

// #include "pe.h"


// // PE structures (already defined in your code, but adding for completeness)
// typedef struct {
//     UINT16 e_magic;
//     UINT16 e_cblp;
//     UINT16 e_cp;
//     UINT16 e_crlc;
//     UINT16 e_cparhdr;
//     UINT16 e_minalloc;
//     UINT16 e_maxalloc;
//     UINT16 e_ss;
//     UINT16 e_sp;
//     UINT16 e_csum;
//     UINT16 e_ip;
//     UINT16 e_cs;
//     UINT16 e_lfarlc;
//     UINT16 e_ovno;
//     UINT16 e_res[4];
//     UINT16 e_oemid;
//     UINT16 e_oeminfo;
//     UINT16 e_res2[10];
//     UINT32 e_lfanew;
// } IMAGE_DOS_HEADER, *PIMAGE_DOS_HEADER;




// typedef struct {
//     UINT32 Signature;
//     PE_COFF_HEADER FileHeader;
//     IMAGE_OPTIONAL_HEADER64 OptionalHeader;
// } IMAGE_NT_HEADERS64, *PIMAGE_NT_HEADERS64;


// // Global storage for driver payload
// typedef struct {
//     VOID *KernelBuf;
//     UINTN KernelLen;
//     VOID *KernelBase;
//     VOID *TgtDrvImgSect;
//     VOID *TgtDrvImgBase;
//     VOID *TgtDrvLdrEntry;
//     UINT32 TgtDrvAddressOfEntrypoint;
//     VOID *OslArchTransferToKernelGate;
// } EFTBL, *PEFTBL;



typedef struct  {
    UINT16    Machine;
    UINT16    NumberOfSections;
    UINT32   TimeDateStamp;
    UINT32   PointerToSymbolTable;
    UINT32   NumberOfSymbols;
    UINT16    SizeOfOptionalHeader;
    UINT16    Characteristics;
}   PE_COFF_HEADER;

typedef struct {
    UINT16 Magic;
    UINT8  MajorLinkerVersion;
    UINT8  MinorLinkerVersion;
    UINT32 SizeOfCode;
    UINT32 SizeOfInitializedData;
    UINT32 SizeOfUninitializedData;
    UINT32 AddressOfEntryPoint;
    UINT32 BaseOfCode;
    UINT64 ImageBase;
    UINT32 SectionAlignment;
    UINT32 FileAlignment;
    UINT16 MajorOperatingSystemVersion;
    UINT16 MinorOperatingSystemVersion;
    UINT16 MajorImageVersion;
    UINT16 MinorImageVersion;
    UINT16 MajorSubsystemVersion;
    UINT16 MinorSubsystemVersion;
    UINT32 Win32VersionValue;
    UINT32 SizeOfImage;
    UINT32 SizeOfHeaders;
    UINT32 CheckSum;
    UINT16 Subsystem;
    UINT16 DllCharacteristics;
    UINT64 SizeOfStackReserve;
    UINT64 SizeOfStackCommit;
    UINT64 SizeOfHeapReserve;
    UINT64 SizeOfHeapCommit;
    UINT32 LoaderFlags;
    UINT32 NumberOfRvaAndSizes;
} PE_OPTIONAL_HEADER64;

typedef struct {
    UINT32 VirtualAddress;
    UINT32 Size;
} DATA_DIRECTORY;

typedef struct {
    UINT8  Name[8];
    UINT32 VirtualSize;
    UINT32 VirtualAddress;
    UINT32 SizeOfRawData;
    UINT32 PointerToRawData;
    UINT32 PointerToRelocations;
    UINT32 PointerToLinenumbers;
    UINT16 NumberOfRelocations;
    UINT16 NumberOfLinenumbers;
    UINT32 Characteristics;
} PE_SECTION_HEADER;


// VOID
// NTAPI
// KeSetSystemAffinityThread(
// 	_In_ SIZE_T Affinity
// );

// PVOID
// NTAPI
// ExAllocatePool(
// 	_In_ SIZE_T PoolType,
// 	_In_ SIZE_T NumberOfBytes
// );

// VOID
// NTAPI
// MmUnmapIoSpace(
// 	_In_ LPVOID BaseAddress,
// 	_In_ SIZE_T NumberOfBytes
// );

// PVOID
// NTAPI
// MmMapIoSpace(
// 	_In_ LPVOID PhysicalAddress,
// 	_In_ SIZE_T NumberOfBytes,
// 	_In_ SIZE_T CacheType
// );

// typedef struct
// {
// 	D_API( KeSetSystemAffinityThread );
// 	D_API( ExAllocatePool );
// 	D_API( MmUnmapIoSpace );
// 	D_API( MmMapIoSpace );
// } API ;

// /* API Hashes */
// #define H_API_KESETSYSTEMAFFINITYTHREAD		0x80679c78 /* KeSetSystemAffinityThread */
// #define H_API_EXALLOCATEPOOL			0xa1fe8ce1 /* ExAllocatePool */
// #define H_API_MMUNMAPIOSPACE			0xf2610ec4 /* MmUnmapIoSpace */
// #define H_API_MMMAPIOSPACE			0x7fbf0801 /* MmMapIoSpace */
