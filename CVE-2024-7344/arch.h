/* windows_loader_structs.h
 *
 * Minima riproduzione di strutture Windows usate
 * dal bootloader (LOADER_PARAMETER_BLOCK & co.).
 * Sufficiente per la *compilazione* in ambiente Linux.
 */

#ifndef WINDOWS_LOADER_STRUCTS_H
#define WINDOWS_LOADER_STRUCTS_H

#include <stdint.h>

/* ------------------------------------------------------------------ */
/*  Tipi di base                                                       */
/* ------------------------------------------------------------------ */
typedef uint8_t   UINT8;
typedef uint16_t  UINT16;
typedef uint32_t  UINT32;
typedef uint64_t  UINT64;
typedef uintptr_t UINTN;   /* dipende dal target – 64 bit su x86_64   */
// typedef char      CHAR8;

/* ------------------------------------------------------------------ */
/*  LIST_ENTRY (doppia linked-list)                                    */
/* ------------------------------------------------------------------ */
// typedef struct _LIST_ENTRY {
//     struct _LIST_ENTRY *Flink;
//     struct _LIST_ENTRY *Blink;
// } LIST_ENTRY, *PLIST_ENTRY;                     /* :contentReference[oaicite:0]{index=0} */

/* ------------------------------------------------------------------ */
/*  Forward declarations: bastano perché nel tuo codice usi solo       */
/*  i puntatori, non dereferenzi i campi interni.                      */
/* ------------------------------------------------------------------ */
typedef struct _CONFIGURATION_COMPONENT_DATA    CONFIGURATION_COMPONENT_DATA, *PCONFIGURATION_COMPONENT_DATA;
typedef struct _NLS_DATA_BLOCK                 NLS_DATA_BLOCK, *PNLS_DATA_BLOCK;
typedef struct _ARC_DISK_INFORMATION           ARC_DISK_INFORMATION, *PARC_DISK_INFORMATION;
typedef struct _LOADER_PARAMETER_EXTENSION     LOADER_PARAMETER_EXTENSION, *PLOADER_PARAMETER_EXTENSION;

/* ------------------------------------------------------------------ */
/*  Blocchi arch-specific                                              */
/* ------------------------------------------------------------------ */
typedef struct _I386_LOADER_BLOCK {            /* x86/x64 */          /* :contentReference[oaicite:1]{index=1} */
    void   *CommonDataArea;
    UINT32  MachineType;
    UINT32  VirtualBias;
} I386_LOADER_BLOCK, *PI386_LOADER_BLOCK;

/* Variante ARM – definiamo solo ciò che serve a compilare            */
typedef struct _ARM_LOADER_BLOCK {
    UINT32  Dummy;            /* placeholder */
} ARM_LOADER_BLOCK, *PARM_LOADER_BLOCK;

/* ------------------------------------------------------------------ */
/*  RTL_RB_TREE: descrittore Red-Black tree                            */
/* ------------------------------------------------------------------ */
typedef struct _RTL_RB_TREE {                                       /* :contentReference[oaicite:2]{index=2} */
    void *Root;
    void *Min;      /* nodo più a sinistra */
} RTL_RB_TREE, *PRTL_RB_TREE;

/* ------------------------------------------------------------------ */
/*  FIRMWARE_INFORMATION_LOADER_BLOCK                                  */
/* ------------------------------------------------------------------ */
typedef struct _FIRMWARE_INFORMATION_LOADER_BLOCK {  /* :contentReference[oaicite:3]{index=3} */
    UINT32 FirmwareTypeEfi : 1;
    UINT32 Reserved        : 31;
    UINT32 Data;  /* union anonima nella definizione MS originale     */
} FIRMWARE_INFORMATION_LOADER_BLOCK, *PFIRMWARE_INFORMATION_LOADER_BLOCK;

/* ------------------------------------------------------------------ */
/*  LOADER_PARAMETER_BLOCK                                             */
/* ------------------------------------------------------------------ */
#pragma pack(push,1)   /* mantieni layout identico a Windows */

typedef struct _LOADER_PARAMETER_BLOCK {                            /* :contentReference[oaicite:4]{index=4} */
    UINT32 OsMajorVersion;
    UINT32 OsMinorVersion;
    UINT32 Size;
    UINT32 OsLoaderSecurityVersion;

    LIST_ENTRY LoadOrderListHead;
    LIST_ENTRY MemoryDescriptorListHead;

    /* Core / ELAM / TPM driver lists */
    LIST_ENTRY BootDriverListHead;
    LIST_ENTRY EarlyLaunchListHead;
    LIST_ENTRY CoreDriverListHead;
    LIST_ENTRY CoreExtensionsDriverListHead;
    LIST_ENTRY TpmCoreDriverListHead;

    UINTN  KernelStack;
    UINTN  Prcb;
    UINTN  Process;
    UINTN  Thread;

    UINT32 KernelStackSize;

    UINT32 RegistryLength;
    void  *RegistryBase;

    PCONFIGURATION_COMPONENT_DATA ConfigurationRoot;

    CHAR8 *ArcBootDeviceName;
    CHAR8 *ArcHalDeviceName;
    CHAR8 *NtBootPathName;
    CHAR8 *NtHalPathName;
    CHAR8 *LoadOptions;

    PNLS_DATA_BLOCK        NlsData;
    PARC_DISK_INFORMATION  ArcDiskInformation;
    PLOADER_PARAMETER_EXTENSION Extension;

    union {
        I386_LOADER_BLOCK I386;
        ARM_LOADER_BLOCK  Arm;
    } u;

    FIRMWARE_INFORMATION_LOADER_BLOCK FirmwareInformation;

    /* campi aggiunti nelle build >= 17134 */
    CHAR8 *OsBootstatPathName;
    CHAR8 *ArcOSDataDeviceName;
    CHAR8 *ArcWindowsSysPartName;

    /* build >= 20150 */
    RTL_RB_TREE MemoryDescriptorTree;
} LOADER_PARAMETER_BLOCK, *PLOADER_PARAMETER_BLOCK;

#pragma pack(pop)

#endif /* WINDOWS_LOADER_STRUCTS_H */
