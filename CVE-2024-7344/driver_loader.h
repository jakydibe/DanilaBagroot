// driver_loader.h
#ifndef DRIVER_LOADER_H
#define DRIVER_LOADER_H

#include <efi.h>
#include <efilib.h>

// PE structures for driver parsing
typedef struct {
    UINT16 Machine;
    UINT16 NumberOfSections;
    UINT32 TimeDateStamp;
    UINT32 PointerToSymbolTable;
    UINT32 NumberOfSymbols;
    UINT16 SizeOfOptionalHeader;
    UINT16 Characteristics;
} PE_COFF_HEADER;

typedef struct {
    UINT16 Magic;
    UINT8  MajorLinkerVersion;
    UINT8  MinorLinkerVersion;
    UINT32 SizeOfCode;
    UINT32 SizeOfInitializedData;
    UINT32 SizeOfUninitializedData;
    UINT32 AddressOfEntryPoint;
    UINT32 BaseOfCode;
} PE_OPTIONAL_HEADER64_PARTIAL;

typedef struct {
    UINT8  Name[8];
    UINT32 VirtualSize;
    UINT32 VirtualAddress;
    UINT32 SizeOfRawData;
    UINT32 PointerToRawData;
    UINT32 PointerToRelocations;
    UINT32 PointerToLinenumbers;
    UINT16 NumberOfRelocations;
    UINT16 NumberOfLinenumbers;
    UINT32 Characteristics;
} PE_SECTION_HEADER;

// Driver information structure
typedef struct {
    VOID   *ImageBase;
    UINTN  ImageSize;
    VOID   *EntryPoint;
    CHAR16 *DriverName;
} DRIVER_INFO;

// Function prototypes
EFI_STATUS LoadDriverFromDisk(
    IN  EFI_HANDLE       ImageHandle,
    IN  EFI_SYSTEM_TABLE *SystemTable,
    IN  CHAR16           *DriverPath,
    OUT DRIVER_INFO      *DriverInfo
);

EFI_STATUS AllocateDriverMemory(
    IN  EFI_SYSTEM_TABLE *SystemTable,
    IN  UINTN            Size,
    OUT VOID             **Buffer
);

#endif